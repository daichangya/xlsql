/*
 * x l S Q L  
 * (c) daichangya, excel.jsdiff.com
 * See xlSQL-license.txt for license details
 *
 */
package com.jsdiff.excel.jdbc;

import com.jsdiff.excel.database.sql.ICommand;
import com.jsdiff.excel.database.xlInstance;

import java.sql.*;
import java.util.logging.Logger;


public class xlStatement implements Statement {

    private static final Logger log = Logger.getLogger(xlStatement.class.getName());
    //~ Constructors �����������������������������������������������������������
    
    protected xlConnection xlCon;
    private Statement dbStm;
    /**
    * Constructs a new StatementImpl object.
    *
    */
    protected xlStatement(xlConnection con, Statement stm) throws SQLException {
         xlCon = con;
         dbStm = stm;
    }

    //~ Methods ����������������������������������������������������������������

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#addBatch
    */
    public void addBatch(String sql) throws SQLException {
        dbStm.addBatch(sql);
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#cancel
    */
    public void cancel() throws SQLException {
        dbStm.cancel();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#clearBatch
    */
    public void clearBatch() throws SQLException {
        dbStm.clearBatch();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#clearWarnings
    */
    public void clearWarnings() throws SQLException {
        dbStm.clearWarnings();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#close
    */
    public void close() throws SQLException {
        dbStm.close();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#execute
    */
    public boolean execute(String sql) throws SQLException {
        boolean ret = true;
        String[] sqlCommand = sql.split("[;]");
        for (int i=0; i < sqlCommand.length; i++) {
            ICommand cmd = xlCon.xlsql.parseSql(sqlCommand[i]);
            if (cmd.execAllowed()) {
                // dbStm may throw an SQLException..., pass on to client
                log.info("xlSQL: execute " + sqlCommand[i]);
                ret = dbStm.execute(sqlCommand[i]);
                cmd.execute();
            }
            else {
                throw new SQLException("xlSQL: execute not allowed");
            }
        }
        return ret;
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#execute
    */
    public boolean execute(String sql, String[] columnNames)
                    throws SQLException {
        throw new SQLException("not supported");
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#execute
    */
    public boolean execute(String sql, int autoGeneratedKeys)
                    throws SQLException {
        throw new SQLException("not supported");
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#execute
    */
    public boolean execute(String sql, int[] columnIndexes)
                    throws SQLException {
        throw new SQLException("not supported");
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#executeBatch
    */
    public int[] executeBatch() throws SQLException {
        throw new SQLException("not supported");
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#executeQuery
    */
    public ResultSet executeQuery(String sql) throws SQLException {
        ResultSet dbRs = dbStm.executeQuery(sql);
        ResultSet rs = new xlResultSet(this, dbRs);
        return rs;
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#executeUpdate
    */
    public int executeUpdate(String sql) throws SQLException {
        int ret = 0;
        String[] sqlCommand = sql.split("[;]");
        for (int i=0; i < sqlCommand.length; i++) {
            ICommand cmd = xlCon.xlsql.parseSql(sqlCommand[i]);            
            if (cmd.execAllowed()) {
                // dbStm may throw an SQLException..., pass on to client
                ret = dbStm.executeUpdate(sqlCommand[i]);
                cmd.execute();
            }
            else {
                throw new SQLException("xlSQL: execute not allowed");
            }
        }
        return ret;
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#executeUpdate
    */
    public int executeUpdate(String sql, String[] columnNames)
                      throws SQLException {
        throw new SQLException("not supported");
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#executeUpdate
    */
    public int executeUpdate(String sql, int autoGeneratedKeys)
                      throws SQLException {
        throw new SQLException("not supported");
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#executeUpdate
    */
    public int executeUpdate(String sql, int[] columnIndexes)
                      throws SQLException {
        throw new SQLException("not supported");
    }
    
    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getConnection
    */
    public Connection getConnection() throws SQLException {
        return xlCon;
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getFetchDirection
    */
    public int getFetchDirection() throws SQLException {
        return dbStm.getFetchDirection();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getFetchSize
    */
    public int getFetchSize() throws SQLException {
        return dbStm.getFetchSize();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getGeneratedKeys
    */
    public ResultSet getGeneratedKeys() throws SQLException {
        return dbStm.getGeneratedKeys();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getMaxFieldSize
    */
    public int getMaxFieldSize() throws SQLException {
        return dbStm.getMaxFieldSize();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getMaxRows
    */
    public int getMaxRows() throws SQLException {
        return dbStm.getMaxRows();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getMoreResults
    */
    public boolean getMoreResults() throws SQLException {
        return dbStm.getMoreResults();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getMoreResults
    */
    public boolean getMoreResults(int current) throws SQLException {
        return dbStm.getMoreResults(current);
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getQueryTimeout
    */
    public int getQueryTimeout() throws SQLException {
        return dbStm.getQueryTimeout();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getResultSet
    */
    public ResultSet getResultSet() throws SQLException {
        ResultSet dbRs = dbStm.getResultSet();
        ResultSet rs = new xlResultSet(this, dbRs);
        return rs;
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getResultSetConcurrency
    */
    public int getResultSetConcurrency() throws SQLException {
        return dbStm.getResultSetConcurrency();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getResultSetHoldability
    */
     public int getResultSetHoldability() throws SQLException {
        return dbStm.getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return false;
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {

    }

    @Override
    public boolean isPoolable() throws SQLException {
        return false;
    }

    @Override
    public void closeOnCompletion() throws SQLException {

    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getResultSetType
    */
    public int getResultSetType() throws SQLException {
        return dbStm.getResultSetType();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getUpdateCount
    */
    public int getUpdateCount() throws SQLException {
        return dbStm.getUpdateCount();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#getWarnings
    */
    public SQLWarning getWarnings() throws SQLException {
        return dbStm.getWarnings();
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#setCursorName
    */
    public void setCursorName(String name) throws SQLException {
        dbStm.setCursorName(name);
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#setEscapeProcessing
    */
    public void setEscapeProcessing(boolean enable) throws SQLException {
        dbStm.setEscapeProcessing(enable);
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#setFetchDirection
    */
    public void setFetchDirection(int direction) throws SQLException {
        dbStm.setFetchDirection(direction);
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#setFetchSize
    */
    public void setFetchSize(int rows) throws SQLException {
        dbStm.setFetchSize(rows);
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#setMaxFieldSize
    */
    public void setMaxFieldSize(int max) throws SQLException {
        dbStm.setMaxFieldSize(max);
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#setMaxRows
    */
    public void setMaxRows(int max) throws SQLException {
        dbStm.setMaxRows(max);
    }

    /**
    * Implements method in interface java.sql.Statement
    * @see Statement#setQueryTimeout
    */
    public void setQueryTimeout(int seconds) throws SQLException {
        dbStm.setQueryTimeout(seconds);
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }
}